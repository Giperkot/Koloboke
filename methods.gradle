def setSourceCompatibility(project, level) { configure(project) {
    sourceCompatibility = level
    def langLevel = 'JDK_' + level.toString().replace('.', '_')
    idea.module.iml { withXml {
        it.asNode().component.find {
            it.@name == 'NewModuleRootManager'
        }.@LANGUAGE_LEVEL = langLevel
    } }
} }

def applyJpsg() {
    apply plugin: 'jpsg'
    idea.module {
        excludeDirs = [file('.gradle')]
        ['classes', 'dependency-cache', 'docs', 'java-compiler', 'libs', 'reports', 'resources',
         'test-results', 'tmp'].each { excludeDirs << file("$buildDir/$it") }
    }
}

def configurePublishing(project, generateJavadoc = true) { configure(project) {
    apply plugin: 'signing'
    apply plugin: 'maven'

    group = 'net.openhft'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        if (generateJavadoc)
            from javadoc
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    ext {
        if (!project.hasProperty('sonatypeUrl'))
            sonatypeUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
        if (!project.hasProperty('sonatypeUsername')) sonatypeUsername = ''
        if (!project.hasProperty('sonatypePassword')) sonatypePassword = ''
    }

    ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask('uploadArchives') }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: sonatypeUrl) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            }
        }
    }

    def installer = install.repositories.mavenInstaller
    def deployer = uploadArchives.repositories.mavenDeployer

    project.ext.poms = [installer, deployer]*.pom
    poms*.whenConfigured { pom ->
        pom.dependencies.removeAll { dep -> dep.scope == 'test' }
        pom.project {
            url = 'https://github.com/OpenHFT/Koloboke'
            inceptionYear = '2013'
            licenses {
                license {
                    name = 'The Apache Software License, Version 2.0'
                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution = 'repo'
                }
            }
            scm {
                url = 'https://github.com/OpenHFT/Koloboke'
                connection = 'scm:git:git://github.com/OpenHFT/Koloboke'
                developerConnection = 'scm:git:git://github.com/OpenHFT/Koloboke'
            }
            developers {
                developer {
                    id = 'leventov'
                    name = 'Roman Leventov'
                    email = 'leventov@ya.ru'
                    url = 'http://www.leventov.ru'
                }
            }
            issueManagement {
                system = 'GitHub'
                url = 'https://github.com/OpenHFT/Koloboke/issues'
            }
        }
    }
} }

ext.setSourceCompatibility = this.&setSourceCompatibility
ext.applyJpsg = this.&applyJpsg
ext.configurePublishing = this.&configurePublishing