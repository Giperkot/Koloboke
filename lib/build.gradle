buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repo.springsource.org/plugins-release' }
    }
    dependencies {
        classpath project(':jpsg:gradle-plugin')
        classpath project('template-processors')
        classpath project('impl-generator')
	    classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
	}
}

if (libTargetJava != '6' && libTargetJava != '8')
    throw new GradleException('libTargetJava should be either 6 or 8')

def apiProject = project('api')
def implCommonProject = project('impl-common')
def implProject = project('impl')

configure([apiProject, implCommonProject, implProject, project('testing')]) {
    applyJpsg()

    dependencies {
        provided "com.google.code.findbugs:annotations:$findbugs_version"
    }

    def jpsgTasks = [generateJavaSpecializations]
    def generateTestSpecializations = tasks.findByName('generateTestJavaSpecializations')
    if (generateTestSpecializations != null)
        jpsgTasks << generateTestSpecializations
    configure(jpsgTasks) {
        addProcessor 'com.koloboke.jpsg.FunctionProcessor'
        addProcessor 'com.koloboke.jpsg.Jdk8FunctionReplacer'
        with "jdk=JDK$libTargetJava"
    }
}

configure([implCommonProject, implProject]) {
    configure(generateJavaSpecializations) {
        addProcessor 'com.koloboke.jpsg.collect.algo.hash.TableTypePreProcessor'
        addProcessor 'com.koloboke.jpsg.collect.algo.hash.TableTypePostProcessor'
    }
}

configure([apiProject, implCommonProject, implProject]) {
    apply plugin: 'jacoco'

    setSourceCompatibility(project, "1.$libTargetJava")

    dependencies {
        provided 'com.google.auto.value:auto-value:1.0-rc1'
    }

    idea.module {
        excludeDirs.remove(file("$buildDir/classes"))
        // AutoValue implementations are located there
        sourceDirs += sourceSets*.output.classesDir
    }
}

configure([apiProject, implCommonProject, implProject]) {
    configure(compileJava) {
        // To suppress warnings about usages of sun.misc.Unsafe API
        options.compilerArgs << '-XDignore.symbol.file'
        options.compilerArgs << '-Xlint:-deprecation' << '-Xlint:-overloads'
        options.fork = true
        options.forkOptions.executable = "${System.properties['java.home']}/../../jdk1.8/bin/javac"
    }

    test.testLogging.exceptionFormat = 'full'

    configurePublishing(project, project.is(apiProject))
    archivesBaseName  = "koloboke-$project.name-jdk${libTargetJava == '6' ? '6-7' : '8'}"
    version = '0.7-SNAPSHOT'
    ext.apiVersion = '0.6'

    poms*.whenConfigured { pom ->
        pom.project {
            name = "Koloboke Collections ${project.description}"
            description = 'Carefully designed and efficient extension ' +
                    'of the Java Collections Framework with primitive specializations and more, ' +
                    "built for Java ${libTargetJava == '6' ? '6 or 7' : '8'} " +
                    "(${project.description})"
        }
    }
}