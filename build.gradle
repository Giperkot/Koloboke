buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repo.springsource.org/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-maven'

    task idea(overwrite: true) {
        dependsOn ideaModule
    }

    task cleanIdea(overwrite: true) {
        dependsOn cleanIdeaModule
    }
}

def leafProjects = subprojects.findAll { it.subprojects.empty }
configure(leafProjects) {
    apply plugin: 'java'
    apply plugin: 'findbugs'

    repositories {
        mavenCentral()
    }

    dependencies {
        provided 'com.google.code.findbugs:jsr305:2.0.3'
        testCompile 'junit:junit:4.11'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
    }

    configure(tasks.withType(JavaCompile) + tasks.withType(Javadoc)) {
        options.encoding = 'UTF-8'
    }

    configure(tasks.withType(JavaCompile)) {
        options.compilerArgs << '-Xlint:all'
        options.compilerArgs += ['-Xlint:-unchecked', '-Xlint:-rawtypes', '-Xlint:-cast']
    }

    findbugs {
        toolVersion '3.0.1'
        effort = 'max'
        reportLevel = 'high'
        excludeFilter = file("$projectDir/findbugs/config/excludeFilter.xml")
        if (!excludeFilter.exists())
            excludeFilter = null
    }

    apply from: "$rootProject.projectDir/methods.gradle"

    ext.kotlin_version = '1.0.1-2'
    setSourceCompatibility(project, 1.8)
}

def metaProjects = project(':jpsg').subprojects +
        [':lib:template-processors', ':lib:impl-generator'].collect(this.&project)
metaProjects.each { p -> evaluationDependsOn(p.path) }
task buildMeta { dependsOn metaProjects*.build }
task cleanMeta { dependsOn metaProjects*.clean }

def mainProjects = leafProjects - metaProjects
configure(mainProjects) {
    task buildMain { dependsOn build }
    task cleanMain { dependsOn clean }
}

tasks.idea.dependsOn ideaProject
tasks.idea << {
    copy {
        from '.'
        into '.idea/'
        include '*.ipr'
        rename { 'modules.xml' }
    }
    cleanIdeaProject.execute()
}

cleanIdea << {
    delete '.idea/modules.xml'
}
